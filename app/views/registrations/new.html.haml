%style
  :sass
    .password_strength_1
      color: #ccc
    .password_strength_2
      color: #faa
    .password_strength_3
      color: #f60
    .password_strength_4
      color: #3c0
    .password_strength_5
      color: #3f0
    
    .validation-message
      color: #f00
    .validation-message.success
      color: #0a0

= javascript_include_tag "jquery.password_strength"

:javascript
  function add_message_to_field(field, message, is_success)
  {
    field = $(field);
    message_container = field.next('.validation-message');
    if (!message_container.length) {
      field.after('<span class="validation-message"></span>');
      message_container = field.next('.validation-message');
    }
    message_container.html(message);
    message_container.toggleClass('success', is_success);
  }

  $(document).ready(function() {
    $('#user_password').after('<span id="password_strength" />');
    $('#user_password').password_strength({'container': '#password_strength'})

    $('#user_username').blur(function() {
      $.post("#{validate_registration_path}", {'user[username]': this.value}, function(data) {
        if (data.username) {
          add_message_to_field('#user_username', data.username, false);
        } else {
          add_message_to_field('#user_username', "OK", true);
        }
      }, "json")
    })

    $('#user_login_email').blur(function() {
      var self = this;
      $.post("#{validate_registration_path}", {'user[login_email]': this.value}, function(data) {
        if (data["login_email"]) {
          add_message_to_field(self, data["login_email"], false);
        } else {
          add_message_to_field(self, "OK", true);
        }
      }, "json")
    })

    $('#user_password_confirmation').blur(function() {
      if (this.value) {
        if ($('#user_password').val() == this.value) {
          add_message_to_field(this, "Confirmation OK", true);
        } else {
          add_message_to_field(this, "Password doesn't match confirmation.", false);
        }
      }
    })
    
  })

%h1
  Registration

- semantic_form_for @user, :url => registration_path, :html => {:class => 'validate'} do |f|
  
  - f.inputs do
    = f.input :username
    = f.input :login_email
    - f.inputs :for => :usr do |uf|
      = uf.input :first_name
      = uf.input :last_name
      = uf.input :one_line_bio
      
    = f.input :password
    = f.input :password_confirmation
  
  = f.buttons

Already have account?
= link_to "Log in", new_user_session_path
